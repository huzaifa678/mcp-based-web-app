---
- hosts: app
  become: true
  vars:
    ecr_repo: "533267178572.dkr.ecr.us-east-1.amazonaws.com/mcp-proj-repo:latest"
    app_service_name: "mcp-app"
    react_dir: "/var/www/html"
    repo_url: "https://github.com/huzaifa678/mcp-based-web-app.git"
    domain_name: "www.codeadvisor.org"

  tasks:
    - name: Install required packages
      apt:
        name:
          - docker.io
          - apache2
          - unzip
          - curl
          - npm
          - git
          - software-properties-common
        state: present
        update_cache: yes

    - name: Install AWS CLI v2
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -o awscliv2.zip
        ./aws/install
      args:
        creates: /usr/local/bin/aws

    - name: Start Docker and Apache
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - docker
        - apache2

    - name: Login to AWS ECR
      shell: |
        aws ecr get-login-password --region us-east-1 | \
        docker login --username AWS --password-stdin 533267178572.dkr.ecr.us-east-1.amazonaws.com

    - name: Pull latest Docker image from ECR
      shell: docker pull {{ ecr_repo }}

    - name: Run Docker container
      shell: |
        docker run -d --name {{ app_service_name }} \
        -p 8000:8000 \
        {{ ecr_repo }}

    - name: Create systemd service for app container
      copy:
        dest: /etc/systemd/system/{{ app_service_name }}.service
        content: |
          [Unit]
          Description=MCP App Container Service
          After=docker.service
          Requires=docker.service

          [Service]
          Restart=always
          ExecStart=/usr/bin/docker start -a {{ app_service_name }}
          ExecStop=/usr/bin/docker stop -t 10 {{ app_service_name }}

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start systemd service
      shell: |
        systemctl daemon-reload
        systemctl enable {{ app_service_name }}
        systemctl start {{ app_service_name }}

    - name: Enable Apache proxy modules
      apache2_module:
        name: "{{ item }}"
        state: present
      loop:
        - proxy
        - proxy_http
        - rewrite

    - name: Create Apache virtual host for app (HTTP + HTTPS)
      copy:
        dest: /etc/apache2/sites-available/mcp-app.conf
        content: |
          <VirtualHost *:80>
              ServerName www.codeadvisor.org
              ServerAlias codeadvisor.org

              # Redirect all HTTP requests to HTTPS
              RewriteEngine On
              RewriteCond %{HTTPS} off
              RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
          </VirtualHost>

          <IfModule mod_ssl.c>
          <VirtualHost *:443>
              ServerName www.codeadvisor.org
              ServerAlias codeadvisor.org

              DocumentRoot /var/www/html

              ProxyPreserveHost On
              ProxyPass /api/ http://localhost:8000/
              ProxyPassReverse /api/ http://localhost:8000/

              ErrorLog ${APACHE_LOG_DIR}/mcp-app-error.log
              CustomLog ${APACHE_LOG_DIR}/mcp-app-access.log combined

              <Directory /var/www/html>
                Options Indexes FollowSymLinks
                AllowOverride All
                Require all granted
              </Directory>

              <IfModule mod_rewrite.c>
                RewriteEngine On
                RewriteCond %{REQUEST_URI} !^/api/
                RewriteCond %{REQUEST_URI} !^/static/
                RewriteCond %{REQUEST_FILENAME} !-f
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteRule ^ /index.html [L]
              </IfModule>

              SSLEngine on
              SSLCertificateFile /etc/letsencrypt/live/www.codeadvisor.org/fullchain.pem
              SSLCertificateKeyFile /etc/letsencrypt/live/www.codeadvisor.org/privkey.pem
              Include /etc/letsencrypt/options-ssl-apache.conf
          </VirtualHost>
          </IfModule>
      notify: Restart Apache

    - name: Disable default Apache site
      command: a2dissite 000-default.conf
      args:
        removes: /etc/apache2/sites-enabled/000-default.conf
      notify: Restart Apache

    - name: Enable app site
      shell: a2ensite mcp-app.conf
      notify: Restart Apache

    - name: Enable app site if not already enabled
      command: a2ensite mcp-app.conf
      args:
        creates: /etc/apache2/sites-enabled/mcp-app.conf
      notify: Restart Apache

    - name: Clone repo on EC2
      git:
        repo: "{{ repo_url }}"
        dest: /home/ubuntu/app
        version: main

    - name: Install Node.js
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        apt-get install -y nodejs
      args:
        creates: /usr/bin/node

    - name: Add swap space
      become: true
      shell: |
        if [ ! -f /swapfile ]; then
          fallocate -l 2G /swapfile
          chmod 600 /swapfile
          mkswap /swapfile
          swapon /swapfile
          echo '/swapfile none swap sw 0 0' >> /etc/fstab
        fi

    - name: Build React frontend on EC2
      shell: |
        cd /home/ubuntu/app/frontend
        npm install
        npm run build
      async: 1800
      poll: 10 

    - name: Deploy React frontend
      copy:
        remote_src: yes
        src: /home/ubuntu/app/frontend/build/
        dest: "{{ react_dir }}/"
        owner: www-data
        group: www-data
        mode: '0755'
      notify: Restart Apache

    - name: Install Certbot and Apache plugin
      apt:
        name:
          - certbot
          - python3-certbot-apache
        state: present
        update_cache: yes

    - name: Obtain and install SSL certificate for domain
      shell: |
        certbot --apache -d {{ domain_name }} --non-interactive --agree-tos -m admin@{{ domain_name }} --redirect
      args:
        creates: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
      notify: Restart Apache

    - name: Setup Certbot auto-renewal
      cron:
        name: "Certbot renew"
        job: "certbot renew --quiet"
        hour: "3"
        minute: "30"

  handlers:
    - name: Restart Apache
      service:
        name: apache2
        state: restarted
